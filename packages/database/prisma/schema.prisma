generator client {
  provider = "prisma-client-js"
  output = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String             @id @default(uuid())
  name            String
  email           String             @unique
  password        String
  isEmailVerified Boolean            @default(false)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  enable2FA       Boolean            @default(false)
  emailNotification Boolean          @default(true)
  twoFactorSecret String?
 
  // Relations
  messages         Message[]
  bids             Bid[]
  auctions         Auction[]
  sessions         Session[]
  verificationCodes VerificationCode[]
  @@map("users")
}

// Chat message model
model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
}

// Auction model
model Auction {
  id          String   @id @default(uuid())
  title       String
  description String
  imageUrl    String?
  startPrice  Float
  currentPrice Float
  startTime   DateTime
  endTime     DateTime
  status      String   @default("PENDING") // PENDING, ACTIVE, ENDED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  user        User     @relation(fields: [createdBy], references: [id])
  bids        Bid[]
  
  @@index([createdBy])
}

// Bid model
model Bid {
  id        String   @id @default(uuid())
  amount    Float
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  auctionId String
  auction   Auction  @relation(fields: [auctionId], references: [id])
  
  @@index([userId])
  @@index([auctionId])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  userAgent String?
  expiredAt DateTime
  createdAt DateTime @default(now())
 
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@map("sessions")
}

model VerificationCode {
  id        String   @id @default(uuid())
  userId    String
  code      String   @unique
  type      String
  expiresAt DateTime
  createdAt DateTime @default(now())
 
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@map("verification_codes")
}